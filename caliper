#!/usr/bin/env python
# -*- coding:utf-8 -*-
#
#   Author  :   wuyanjun 00291783
#   E-mail  :   wu.wu@hisilicon.com
#   Date    :   15/01/13 13:53:59
#   Desc    :
#
import pdb
import os
import re
import sys
import time
import logging
import shutil
import signal
import datetime
import commands
import subprocess

from argparse import ArgumentParser
from caliper.client.shared.caliper_path import folder_ope as FOLDER
try:
    import caliper.common as common
except ImportError:
    import common

from caliper.server.build import build
from caliper.server.run import test_run
from caliper.server.run import write_results
from caliper.client.shared.settings import settings
from caliper.client.shared import error
from caliper.server.hosts import host_factory
from caliper.client.shared import caliper_path
from caliper.client.shared import utils
from caliper.client.shared import send_mails
from caliper.server import summary
from caliper.server.parser_process import parser as parser_engine
from caliper.server.parser_process import normalize
from caliper.client.shared.caliper_path import intermediate


logging.basicConfig(level=logging.INFO)
def build_all_tests(remote_host,f_option):
    try:
        logging.info("Begining to build Caliper for the remote host")
        result1 = build.build_for_target(remote_host,f_option)
    except Exception, e:
        logging.info(e)
        raise
    else:
        return result1

def run_caliper(remote_host,f_option):
    try:
        logging.debug("begining to run Caliper")
        result = test_run.run_caliper_tests(remote_host,f_option)
    except Exception, e:
        print e
        logging.info("There is wrong when running Caliper")
        raise
    else:
        return result

def parser_caliper_logs(remote_host,f_option):
    try:
        logging.debug("begining to Parse Caliper Logs")
        result = test_run.parser_caliper_tests(remote_host,f_option)
    except Exception, e:
        print e
        logging.info("There is wrong when parsing Caliper")
        raise
    else:
        return result

def parser_caliper(remote_host):
    try:
        logging.debug("begining to parser the result of caliper")
        parser_engine.parser_caliper(remote_host)
    except Exception, e:
        logging.info("There is wrong when parsering the caliper result")
        raise 

def get_remote_host():
    try:
        client_ip = settings.get_value('CLIENT', 'ip', type=str)
    except Exception, e:
        client_ip = '127.0.0.1'
    try:
        port = settings.get_value('CLIENT', 'port', type=int)
    except Exception, e:
        port = 22
    try:
        user = settings.get_value('CLIENT', 'user', type=str)
    except Exception, e:
        user = os.getlogin()
    try:
        password = settings.get_value('CLIENT', 'password', type=str)
    except Exception, e:
        raise error.ServRunError(e.args[0], e.args[1])

    remote_host = host_factory.create_host(client_ip, user, password, port)
    return remote_host

def kill_django(pid):
    children = commands.getoutput("ps --ppid=%d -o pid=" % pid).split()
    for child in children:
        children1 = commands.getoutput("ps --ppid=%d -o pid=" %
                int(child)).split()
        for child1 in children1:
            utils.safe_kill(child1, signal.SIGINT)
        utils.safe_kill(child, signal.SIGSTOP)
    utils.kill_process_tree(pid)
RESULT_DIR = caliper_path.folder_ope.results_dir

def generate_web_tar():
    newpid = os.fork()
    logging.debug("the pid number is %d" % newpid)
    #child process
    if newpid == 0:
        return_code = 0
        try:
            subprocess.call( "cd %s; python manage.py migrate; cd -" %
                    caliper_path.FRONT_END_DIR, shell=True )
            return_code = subprocess.call("cd %s; python\
                    manage.py runserver --noreload 1>/dev/null 2>&1 & " %
                    caliper_path.FRONT_END_DIR, shell=True)
        except Exception as e:
            raise e
        else:
            os._exit(return_code)
    else: # parent process
        time.sleep(10)
        logging.debug("the parent pid of parent is %d" % os.getpid())
        try:
            logging.info("Generating the webpages which are test results")
            subprocess.call("wget -r -p -k -np\
                    http://127.0.0.1:8000 -P %s -q" % RESULT_DIR,
                    shell=True)
            test_dir = os.path.join(RESULT_DIR, 'test_results')
            if os.path.exists( test_dir ):
                shutil.rmtree(test_dir)
            test_dir = os.path.join(RESULT_DIR, 'test_results.tar.gz')
            if os.path.exists( test_dir ):
                try:
                    shutil.rmtree(test_dir)
                except:
                    os.remove(test_dir)
            subprocess.call("cd %s; mv 127.0.0.1:8000 test_results; tar\
                    czf test_results.tar.gz test_results; rm -fr\
                    test_results" % RESULT_DIR, shell=True)
        except Exception as e:
            print e
            logging.info("There is wrong with generating the test result webpage")
            kill_django(newpid)
            return 0
        else:
            logging.info("Finishing generating the test result webpage")
            kill_django(newpid)
            return 1

def normalize_scores():
    write_results.yaml_filter(caliper_path.HTML_DATA_DIR_INPUT)
    return


if __name__=="__main__":
    parser = ArgumentParser()
    parser.add_argument("-b", "--build", action="store_true",
            dest="build", default=True,help="select to build the selected test tools")
    parser.add_argument("-B", "--nobuild", action="store_false",
            dest="build", help="select not to build process of test tools")
    parser.add_argument("-r", "--run", action="store_true", dest="run", default=True,
            help="select to run the selected test tools")
    parser.add_argument("-R", "--norun", action="store_false", dest="run", help=
            "not to execute the process of running test tools")
    parser.add_argument("-p", "--parse", action="store_true", dest="parse", default=True,
                        help="select to Parse the selected test tools")
    parser.add_argument("-P", "--noparse", action="store_false", dest="parse", help=
            "not to Parse the process of running test tools")
    parser.add_argument("-s", "--score", action="store_true", dest="score", default=True,
                        help="select to Score the selected test tools")
    parser.add_argument("-S", "--noscore", action="store_false", dest="score", help=
                        "not to Score the process of running test tools")
    parser.add_argument("-w", "--webpage", action="store_true", dest="webpage", default=False,
            help="select to generate the webpage test report")
    parser.add_argument("-e", "--email", action="store_true", dest="send_email",
            default=False, help="Select to send mail to the receivers or not")
    parser.add_argument( "-f", "--folder", action="store", dest="folder",
            default="", help="assign a folder to store the results")
    parser.add_argument("-c", "--config", action="store", dest="config_file",
            default="", help="specify the location of config file")
    args = parser.parse_args()
    start_time = datetime.datetime.now()

    if args.config_file:
        caliper_path.config_files.name = args.config_file
        caliper_path.config_files.setup_path()
        if not os.path.exists(caliper_path.config_files.tests_cfg_dir):
            logging.info("The tests_cfg_dir does not exists.")
            sys.exit()
        if not os.path.exists(caliper_path.config_files.config_dir):
            logging.info("The config_dir does not exists.")
            sys.exit()
        settings.set_config_files(os.path.join(
                                caliper_path.config_files.config_dir,
                                'client_config.cfg'
                                ))
    remote_host = get_remote_host()
    f_option = 0
    if args.folder:
        f_option = 1
        caliper_path.folder_ope.name = args.folder
        caliper_path.folder_ope.set_up_path()
        if os.path.exists(FOLDER.caliper_log_file):
            fp = open(FOLDER.caliper_log_file,'a+')
            fp.write("re-execution with -f .It may be execution of all the tools or some specific tools as specified in the config file \n")
            fp.close()
    if not os.path.exists(caliper_path.folder_ope.name):
        os.makedirs(caliper_path.folder_ope.name)

    if args.build:
        try:
            result1 = build_all_tests(remote_host,f_option)
            if result1:
                sys.exit()
        except Exception, e:
            raise
            sys.exit()

    if args.run: 
        try:
            result2 = run_caliper(remote_host, f_option)
            if result2:
                sys.exit()

        except Exception:
            raise
            sys.exit()

    end_time = datetime.datetime.now()
    interval = end_time - start_time

    if args.run:
        try:
            summary.output_summary_info(remote_host, interval.seconds)
        except Exception, e:
            raise e

    if args.parse:
        try:
            result2 = parser_caliper_logs(remote_host, f_option)
            if result2:
               sys.exit()
            result2 = test_run.compute_caliper_logs(remote_host,1)
        except Exception:
            raise
            sys.exit()

    if args.score:
        try:
            result2 = test_run.compute_caliper_logs(remote_host,2)
            if intermediate:
                parser_caliper(remote_host)
        except Exception as e:
            print e
            pass

    if args.webpage and not args.send_email:
        try:
            flag = normalize_scores()
            write_results.normalize_caliper()
            normalize.normalise()
        except Exception as e:
            print e
            sys.exit()
        flag = generate_web_tar()

    if args.webpage and args.send_email:
        flag = generate_web_tar()
        result_path = os.path.join(caliper_path.folder_ope.results_dir,
                'test_results.tar.gz')
        if os.path.exists(result_path):
            send_mails.send_mails(result_path)

    if not args.webpage and args.send_email:
        current_path = os.getcwd()
        flag = 0
        for root, _, files in sorted(os.walk(current_path)):
            for name in files:
                if re.search('test_results.tar.gz', name):
                    result_path = os.path.join(root, name)
                    flag = 1
                    break
            if flag == 1:
                break
        if os.path.exists(result_path):
            send_mails.send_mails(result_path)

