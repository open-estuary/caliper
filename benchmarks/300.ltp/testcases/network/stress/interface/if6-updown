#!/bin/sh

################################################################################
##                                                                            ##
## Copyright (c) International Business Machines  Corp., 2005                 ##
##                                                                            ##
## This program is free software;  you can redistribute it and#or modify      ##
## it under the terms of the GNU General Public License as published by       ##
## the Free Software Foundation; either version 2 of the License, or          ##
## (at your option) any later version.                                        ##
##                                                                            ##
## This program is distributed in the hope that it will be useful, but        ##
## WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY ##
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License   ##
## for more details.                                                          ##
##                                                                            ##
## You should have received a copy of the GNU General Public License          ##
## along with this program;  if not, write to the Free Software               ##
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA    ##
##                                                                            ##
##                                                                            ##
################################################################################
#
# File:
#   if6-updown
#
# Description:
# Verify the IPv6 connectivity isn't broken with upping and downing
# an interface many times
#    test01 - by ifconfig command
#    test02 - by ip command
#
# Setup:
#   See ltp-yyyymmdd/testcases/network/stress/README
#
# Author:
#   Mitsuru Chinen <mitch@jp.ibm.com>
#
# History:
#	Oct 19 2005 - Created (Mitsuru Chinen)
#
#-----------------------------------------------------------------------
# Uncomment line below for debug output.
#trace_logic=${trace_logic:-"set -x"}
$trace_logic

# Make sure the value of LTPROOT
LTPROOT=${LTPROOT:-`(cd ../../../../ ; pwd)`}
export LTPROOT

# Total number of the test case
TST_TOTAL=2
export TST_TOTAL

# Default of the test case ID and the test case count
TCID=if6-updown
TST_COUNT=0
export TCID
export TST_COUNT

# Check the environmanet variable
. check_envval || exit $TST_TOTAL

# The number of the interface up/down in each test case
IF_UPDOWN_TIMES=${IF_UPDOWN_TIMES:-10000}

# The interval of the check interface activity
CHECK_INTERVAL=${CHECK_INTERVAL:-`expr $IF_UPDOWN_TIMES \/ 100`}

# The number of the test link where tests run
LINK_NUM=0



#-----------------------------------------------------------------------
#
# NAME:
#   do_setup
#
# DESCRIPTION:
#   Make a IPv6/IPv6 connectivity
#
# SET VALUES:
#   rhost_ipv6lladdr	- IPv6 Link-local Address of the remote host
#   lhost_ifname	- Interface name of the localhost
#
#-----------------------------------------------------------------------
do_setup()
{
    TCID=if6-updown
    TST_COUNT=0

    # Initialize the interfaces
    initialize_if lhost ${LINK_NUM}
    initialize_if rhost ${LINK_NUM}

    # Get the Interface name of local host
    lhost_ifname=`get_ifname lhost ${LINK_NUM}`
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Failed to get the interface name at the local host"
	exit $TST_TOTAL
    fi

    # Get IPv6 link-local address of the remote host
    rhost_ifname=`get_ifname rhost ${LINK_NUM}`
    ipcom_output=`mktemp -p $TMPDIR`
    $LTP_RSH $RHOST "PATH=/sbin:/usr/sbin:$PATH ip -f inet6 addr show dev $rhost_ifname" > $ipcom_output
    rhost_ipv6lladdr=`fgrep 'scope link' $ipcom_output | awk '{ print $2 }' | sed "s/\/.*$//"`
    rm -f $ipcom_output
    if [ x$rhost_ipv6lladdr = x ]; then
	tst_resm TBROK "Link-local address is not found at $rhost_ifname on the remote host"
	exit $TST_TOTAL
    fi
}



#-----------------------------------------------------------------------
#
# NAME:
#   do_cleanup
#
# DESCRIPTION:
#   Recover the tested interfaces
#
#-----------------------------------------------------------------------
do_cleanup()
{
    # Initialize the interfaces
    initialize_if lhost ${LINK_NUM}
    initialize_if rhost ${LINK_NUM}
}

#-----------------------------------------------------------------------
#
# FUNCTION:
#   test_body
#
# DESCRIPTION:
#   main code of the test
#
# Arguments:
#   $1: define the test type
#       1 - ifconfig command case
#       2 - ip command case
#
#-----------------------------------------------------------------------
test_body()
{
    test_type=$1

    TCID=if6-updown0$test_type
    TST_COUNT=$test_type

    case $test_type in
	1)
	test_command="ifconfig"
	;;
	2)
	test_command="ip"
	;;
	*)
	tst_resm TBROK "unspecified case"
	return 1
	;;
    esac

    tst_resm TINFO "Verify the IPv6 connectivity is not broken when the $test_command command ups, then downs an interface $IF_UPDOWN_TIMES times"

    # Check the connctivity
    check_icmpv6_connectivity $lhost_ifname $rhost_ipv6lladdr
    if [ $? -ne 0 ]; then
	tst_resm TBROK "Test Link $LINK_NUM is somthing wrong."
	return 1
    fi

    # Start the loop
    cnt=0
    while [ $cnt -lt $IF_UPDOWN_TIMES ]; do
	# Down
	case $test_type in
	    1)
	    ifconfig $lhost_ifname down
	    ;;
	    2)
	    ip link set $lhost_ifname down
	    ;;
	esac
	if [ $? -ne 0 ]; then
	    tst_resm TFAIL "Failed to disable $lhost_ifname"
	    return 1
	fi

	# Wait 0-2 seconds for imcomplete/complete DAD.
	sleep `expr $cnt % 3`

	# Up
	case $test_type in
	    1)
	    ifconfig $lhost_ifname up
	    ;;
	    2)
	    ip link set $lhost_ifname up
	    ;;
	esac
	if [ $? -ne 0 ]; then
	    tst_resm TFAIL "Failed to enable $lhost_ifname"
	    return 1
	fi

	# Check the connectivity every CHECK_INTERVAL time
	cnt=`expr $cnt + 1`
	if [ $CHECK_INTERVAL -ne 0 ]; then
	    if [ `expr $cnt % ${CHECK_INTERVAL}` -eq 0 ]; then
		check_icmpv6_connectivity $lhost_ifname $rhost_ipv6lladdr
		if [ $? -ne 0 ]; then
		    tst_resm TFAIL "$lhost_ifname is broken at ${cnt} time"
		    return 1
		fi
	    fi
	fi
    done

    # Check the connectivity again
    check_icmpv6_connectivity $lhost_ifname $rhost_ipv6lladdr
    if [ $? -ne 0 ]; then
	tst_resm TFAIL "$lhost_ifname is broken."
	return 1
    fi
    tst_resm TPASS "Test is finished successfully."

    return 0
}


#-----------------------------------------------------------------------
#
# Main
#
# Exit Value:
#   The number of the failure
#
#-----------------------------------------------------------------------

RC=0
do_setup
test_body 1 || RC=`expr $RC + 1`	# Case of ifconfig command
test_body 2 || RC=`expr $RC + 1`	# Case of ip command
do_cleanup

exit $RC
